{
  "info": {
    "name": "Realworld Datastore API Tests",
    "_postman_id": "293d1768-5605-e0a5-770a-ec9569803f22",
    "description": "",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [{
      "name": "automated",
      "item": [{
          "name": "Ping",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "tests['should have status 200'] = pm.response.code === 200;",
                "res = pm.response.json();",
                "tests['should have pong field'] = res.pong;",
                ""
              ]
            }
          }],
          "request": {
            "method": "GET",
            "header": [{
              "key": "Content-Type",
              "value": "application/json"
            }],
            "body": {},
            "url": {
              "raw": "{{apiUrl}}/ping",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "ping"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Login",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "tests['should have status 200'] = pm.response.code === 200;",
                "res = pm.response.json();",
                "console.log(res);",
                "tests['should have user field'] = typeof(res.user) === 'object';",
                "var user = res.user;",
                "",
                "var expectedUserFields = ['email', 'token', 'username', 'bio', 'image'];",
                "expectedUserFields.forEach(function(key) {",
                "    tests[`user should have ${key} field`] = (typeof(user[key]) !== 'undefined');",
                "});",
                "tests['should have correct email'] = user.email == 'basicuser@mail.com';",
                "tests['should have correct username'] = user.username == 'basicuser';",
                "",
                "pm.globals.unset('authToken');",
                "pm.globals.set('authToken', user.token);",
                "tests['global variable token should be set'] = pm.globals.get('authToken');",
                ""
              ]
            }
          }],
          "request": {
            "method": "POST",
            "header": [{
              "key": "Content-Type",
              "value": "application/json"
            }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user\": {\n    \"email\": \"basicuser@mail.com\",\n    \"password\": \"password\"\n  }\n}"
            },
            "url": {
              "raw": "{{apiUrl}}/users/login",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "users",
                "login"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Authenticate",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "tests['should have status 200'] = pm.response.code === 200;",
                "res = pm.response.json();",
                "console.log(res);",
                "tests['should have user field'] = typeof(res.user) === 'object';",
                "var user = res.user;",
                "",
                "var expectedUserFields = ['email', 'token', 'username', 'bio', 'image'];",
                "expectedUserFields.forEach(function(key) {",
                "    tests[`user should have ${key} field`] = (typeof(user[key]) !== 'undefined');",
                "});",
                "tests['should have correct email'] = user.email == 'basicuser@mail.com';",
                "tests['should have correct username'] = user.username == 'basicuser';",
                ""
              ]
            }
          }],
          "request": {
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              }
            ],
            "body": {},
            "url": {
              "raw": "{{apiUrl}}/user",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "user"
              ]
            }
          },
          "response": []
        },
        {
          "name": "404",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "tests['should have status 404'] = pm.response.code === 404;",
                "res = pm.response.json();",
                "console.log(res);",
                "tests['should have correct error message'] = res.errors.body[0].indexOf('404 Not found') > -1;",
                ""
              ]
            }
          }],
          "request": {
            "method": "GET",
            "header": [],
            "body": {},
            "url": {
              "raw": "{{apiUrl}}/nopez",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "nopez"
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Profile",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "tests['should have status 200'] = pm.response.code === 200;",
                "res = pm.response.json();",
                "console.log(res);",
                "var profile = res.profile;",
                "tests['should have profile field'] = typeof(profile) === 'object';",
                "var expectedProfileFields = ['username', 'bio', 'image', 'following'];",
                "expectedProfileFields.forEach(function(key) {",
                "    tests[`profile should have ${key} field`] = (typeof(profile[key]) !== 'undefined');",
                "});",
                "tests['should have correct username'] = profile.username === 'basicuser';",
                "tests['should have correct following'] = profile.following === false;",
                ""
              ]
            }
          }],
          "request": {
            "method": "GET",
            "header": [],
            "body": {},
            "url": {
              "raw": "{{apiUrl}}/profiles/basicuser",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "profiles",
                "basicuser"
              ]
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "manual",
      "item": [{
        "name": "Signup",
        "request": {
          "method": "POST",
          "header": [{
            "key": "Content-Type",
            "value": "application/json"
          }],
          "body": {
            "mode": "raw",
            "raw": "{\n  \"user\": {\n    \"username\": \"basicuser\",\n    \"email\": \"basicuser@mail.com\",\n    \"password\": \"password\"\n  }\n}"
          },
          "url": {
            "raw": "{{apiUrl}}/users",
            "host": [
              "{{apiUrl}}"
            ],
            "path": [
              "users"
            ]
          }
        },
        "response": []
      }]
    }
  ]
}
